---
layout: post
title: 'Using TDD To Create A Working Application In C# : Part 1'
date: '2012-01-12 07:08:03'
---

<p>In this series of blog posts I am going to go through step by step how to create a working application in C# by using the Test Driven Development process.</p>  <h3>The Application</h3>  <p>The application that I am going to build is a 1 page site that allows users to enter their favourite artist and track title then it will suggest other music they may like. The reason I have choose this is its relatively simple but at the same time covers a lot of the key TDD areas.</p>  <h3>Tools</h3>  <ul>   <li>VS2010 </li>    <li>ASP.Net MVC 3 </li>    <li>Entity Framework 4 </li>    <li>NuGet </li>    <li>LastFM <a href="http://www.last.fm/api/account" target="_blank">Application Key</a> for their API. </li><li>Moq</li>    <li>SQL Server 2005+ (Probably will work on 2000) </li> </ul>  <h3></h3>  <h3>Features</h3>  <p>What we are going to create is a 1 page Asp.Net MVC site with a search form for finding similar tracks, a results area to show the similar tracks and another area to list recent searches. I’ll be using the Last FM REST API to find the similar music (specifically the <a href="http://www.last.fm/api/show/track.getSimilar">track.getSimilar</a> call), to make the REST calls we’re going to use RestSharp a .Net library for accessing REST services. I’m going to use the built in Visual Studio unit test framework, if you don't have this in your version you’ll be able to use nUnit or any other unit testing framework with minimal changes.</p>  <h3>Configuring The Solution</h3>  <p>In Visual Studio take the following steps</p>  <ol>   <li>File New, Other Project Types, Visual Studio Solutions </li>    <li>Create a blank solution called “TDDMusicMatch” </li>    <li>Add a new ASP.Net MVC 3 Web Application called “TDDMusicMatch.Web” with these options     <br clear="all" />&#160;&#160; <a href="/content/images/WPImport/2012/01/newmvcproject.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="newmvcproject" border="0" alt="newmvcproject" src="/content/images/WPImport/2012/01/newmvcproject_thumb.png" width="289" height="238" /></a></li>    <li>Add a new test project called “TDDMusicMatch.Tests”</li>    <li>Delete UnitTest1.cs from the test project</li> </ol>  <p>The solution should then look like this</p>  <p><a href="/content/images/WPImport/2012/01/solutionMusicMatch.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="solutionMusicMatch" border="0" alt="solutionMusicMatch" src="/content/images/WPImport/2012/01/solutionMusicMatch_thumb.png" width="194" height="237" /></a> </p>  <p>In part 2 we will go through creating our first unit tests…</p>